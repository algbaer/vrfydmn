#!/usr/bin/python
"""
vrfdmn - a milter service for postfix
Copyright (C) 2014  R.N.S.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

import sys
import os
import pwd
import grp
import signal
import Milter
import threading
import traceback

try:
    import ldap
    import ldap.sasl
    from ldap.ldapobject import ReconnectLDAPObject
except ImportError:
    no_module_ldap = True
else:
    no_module_ldap = False

try:
    import MySQLdb as mdb
except ImportError:
    no_module_sql = True
else:
    no_module_sql = False

try:
    import memcache
except ImportError:
    no_module_memcache = True
else:
    no_module_memcache = False

try:
    import setproctitle
    setproctitle.setproctitle("vrfydmn")
except:
    pass

from syslog import *
from syslog import syslog as syslog
from getopt import getopt
from email.header import decode_header
from email.utils import parseaddr
from threading import Thread
from Queue import Queue


NAME = "vrfydmn"

# Defaults
BINDADDR = "[::1]"
PORT = 30072
MILTERUSER = "milter"
MILTERGROUP = "milter"
LDAP_TIMEOUT = 60
MAX_SQL_CONNECT_RETRIES = 3
VERSION = "0.6"

__version__ = VERSION
__author__ = "Christian Roessner <c@roessner.co>"
__copyright__ = "Copyright (C) 2011  R.N.S."


class Cfg(object):
    """Store configuration parameters"""

    debug = False
    fix_header = False
    opposite = False
    socketname = "inet6:%i@%s" % (PORT, BINDADDR)
    milteruser = MILTERUSER
    miltergroup = MILTERGROUP
    pidfile = None

    workerQueue = Queue()

    use_flatfile = False
    use_ldap = False
    use_sql = False
    use_memcached = False

    ldap_cf = None
    ldap_con = None

    sql_cf = None
    sql_con = None

    memcached_con = None


class VrfyDmnMilter(Milter.Base):
    """
    Milter that comares the domain component of an email address read from the
    From:-header and compares it to a list of Postfix domains. If a match is
    found, mail is allowed to pass, else the mail is rejected.
    """
    
    def __init__(self):
        self.__id = Milter.uniqueID()
        self.__ipname = None
        self.__ip = None
        self.__port = None
        self.__reject = False
        self.__dryrun_reject = False
        self.__email = ""
        self.__mail_from = ""
        self.__original_from = ""
        self.__add_header = True

    @Milter.noreply
    def connect(self, ipname, family, hostaddr):
        """connect callback """

        self.__ip = hostaddr[0]
        self.__ipname = ipname
        self.__port = hostaddr[1]

        if Cfg.debug:
            print("id=%i connect from %s[%s]:%s" % (self.__id,
                                                    self.__ipname,
                                                    self.__ip,
                                                    self.__port))
        syslog("connect from %s[%s]:%s" % (self.__ipname,
                                           self.__ip,
                                           self.__port))
        return Milter.CONTINUE

    @Milter.noreply
    def envfrom(self, mailfrom, *dummy):
        """Callback that is called when MAIL FROM: is recognized. This also
        is the most earliest time, where we can collect nearly all connection
        specific information.
        """

        self.__mail_from = parseaddr(mailfrom)[1]

        return Milter.CONTINUE

    @Milter.noreply
    def header(self, name, hval):
        """header callback gets called for each header"""

        email = ""

        if Cfg.debug:
            print("%s: %s" % (name, hval))

        if name.lower() == "from":
            self.__original_from = hval

            # Extract email from most right tuple
            decoded_from = decode_header(hval)[-1]

            # Try to find the email address and to cut off garbage
            decoded_from_parts = decoded_from[0].split()
            for component in iter(decoded_from_parts):
                # NOTE: Asume the last occurence of an "@" represents the
                # email address.
                # NOTE: RFC5322 allows a mailbox-list for the From field! 
                # Currently this fact is ignored!
                if "@" in component:
                    email = component

            email = parseaddr(email)[1]

            self.__email = email

            # From: <> found, skip this mail
            if email == "":
                if Cfg.debug:
                    print("id=%i %s return_value=skip"
                          % (self.__id, self.getsymval('i')))
                syslog(LOG_INFO, "%s: return_value=skip" % self.getsymval('i'))

                return Milter.CONTINUE

            # Cut local part from email
            from_domain = email.split("@")[1]

            # Remember, if a domain was found
            found = False

            if Cfg.fix_header:
                self.__dryrun_reject = True
            elif Cfg.opposite:
                self.__reject = False
            else:
                self.__reject = True

            if Cfg.use_ldap:
                response = Queue()
                Cfg.workerQueue.put((response,
                                     Cfg.ldap_con.query_ldap,    # func
                                     (from_domain,)))            # *args
                result = response.get()
                if result is True or result is None:
                    found = True
                    if Cfg.fix_header:
                        self.__dryrun_reject = False
                    elif Cfg.opposite:
                        self.__reject = True
                    else:
                        self.__reject = False

            if not found and Cfg.use_sql:
                response = Queue()
                Cfg.workerQueue.put((response,
                                     Cfg.sql_con.query_sql,     # func
                                     (from_domain,)))           # *args
                result = response.get()
                if result is True or result is None:
                    found = True
                    if Cfg.fix_header:
                        self.__dryrun_reject = False
                    elif Cfg.opposite:
                        self.__reject = True
                    else:
                        self.__reject = False

            if not found and Cfg.use_flatfile:
                if PfDomains.domains != []:
                    # Honor sub domains
                    for key_domain in iter(PfDomains.domains):
                        if key_domain in from_domain:
                            if Cfg.fix_header:
                                self.__dryrun_reject = False
                            elif Cfg.opposite:
                                self.__reject = True
                            else:
                                self.__reject = False
                            break

            result = "reject" if self.__reject else "continue"

            if Cfg.debug:
                print("id=%i %s header_from=<%s> return_value=%s"
                      % (self.__id, self.getsymval('i'), email, result))
            syslog(LOG_INFO, "%s: header_from=<%s> return_value=%s"
                   % (self.getsymval('i'), email, result))

        if name.lower() == "reply-to":
            self.__add_header = False

        return Milter.CONTINUE

    def eoh(self):
        """eoh - end of header. Gets called after all headers have been
        proccessed"""

        if self.__reject:
            self.setreply("554", xcode="5.7.0", msg="Reject Queue-ID: %s - "
                          "Do not send mail with forged "
                          "RFC5322 from address: <%s>"
                          % (self.getsymval('i'), self.__email))

            return Milter.REJECT

        return Milter.CONTINUE

    def eom(self):
        """eom - end of message. If --fix was given at the command line, we
        replace the broken From:-header with the MAIL FROM value"""

        if (self.__dryrun_reject and
            self.__email != self.__mail_from):

            self.chgheader("From", 0, "<%s>" % self.__mail_from)
            if Cfg.debug:
                print("id=%i %s header_from=<%s> modified=<%s>"
                      % (self.__id,
                         self.getsymval('i'),
                         self.__email,
                         self.__mail_from))
            syslog(LOG_INFO, "%s: header_from=<%s> modified=<%s>"
                   % (self.getsymval('i'), self.__email, self.__mail_from))

            if self.__add_header:
                self.addheader("Reply-To", self.__original_from)
                decoded_from = decode_header(self.__original_from)
                new_from = " ".join([s for s, _ in decoded_from])
                if Cfg.debug:
                    print("id=%i %s reply_to: %s"
                          % (self.__id, self.getsymval('i'), new_from))
                syslog(LOG_INFO, "%s: reply_to: %s"
                       % (self.getsymval('i'), new_from))

        return Milter.CONTINUE

    def close(self):
        """close callback"""

        if Cfg.debug:
            print("id=%i disconnect from %s[%s]:%s" % (self.__id,
                                                       self.__ipname,
                                                       self.__ip,
                                                       self.__port))
        syslog("disconnect from %s[%s]:%s" % (self.__ipname,
                                              self.__ip,
                                              self.__port))

        return Milter.CONTINUE


class MetaPfDomains(type):
    """
    PfDomains is a central store for all postfix domains that the milter
    recognizes as trusted domains
    """

    _domains = list()

    __lock = threading.Lock()

    def _set_postfix_domains(meta, pf_file):
        generated_list = list()

        try:
            with open(pf_file) as fd:
                while True:
                    raw_line = fd.readline()
                    if raw_line == "":
                        break

                    line = raw_line.strip()

                    # Skip comments and empty lines
                    if line.startswith("#"):
                        continue
                    if line == "":
                        continue

                    key_domain = line.split()[0]
                    generated_list.append(key_domain)

                    # Make operation thread safe
                    with MetaPfDomains.__lock:
                        meta._domains = generated_list

        except OSError, e:
            # Unable to read Postfix domains!
            if Cfg.debug:
                print >> sys.stderr, ('Unable to read %s: %s' % (pf_file, e))
            syslog(LOG_ERR, 'Unable to read %s: %s' % (pf_file, e))

    def _get_postfix_domains(meta):
        return meta._domains

    domains = property(_get_postfix_domains, _set_postfix_domains)


class PfDomains(object):
    """We use a meta class, as the "domains" variable shall not be world
    readable and writeable. This is a class with classmethods and properties
    """

    __metaclass__ = MetaPfDomains


class Domains(object):
    """
    Base mixin class for all kinds of lists of domains. Each database driver
    must derive from this base class. The constructor requires at least a
    configuration file, which is directly parsed and evaluated. The result is
    a dictionary that is stored internally. Each driver itself knows how to
    deal with the values found.
    
    As the base class implements an iterator and a representation method, the
    values being processed by each driver are returned as a list of domains.
    
    We do not keep database connections open, as a list of domains normally
    does not float too often. Additionally the amount of domains will never be
    too large, so we can read all data at once and keep it in memory.
    
    """
    def __init__(self, cffile):
        self._filecontent = {}
        self._cf_read_err = False

        try:
            with open(cffile, "r") as fd:
                while True:
                    line = fd.readline()
                    if line == "":
                        break
                    if line.count('=') >= 1:
                        idx = line.find('=')
                        k = line[0:idx].strip().lower()
                        v = line[idx+1:].strip()
                    else:
                        k = line.strip().lower()
                        v = []
                    if k != "":
                        self._filecontent[k] = v

        except Exception, e:
            # Unable to read config file
            if Cfg.debug:
                print >> sys.stderr, ('Unable to read %s: %s' % (cffile, e))
            syslog(LOG_ERR, 'Unable to read %s: %s' % (cffile, e))
            self._cf_read_err = True


class LDAPDomains(Domains):
    """
    The LDAPDomains driver connects to a list of LDAP servers. It supports
    simple and SASL authentication, as well as TLS connections.
    
    """
    def __init__(self, cffile):
        Domains.__init__(self, cffile)

        self.__con = None

        if self._cf_read_err:
            return

        self.__host = "ldap://127.0.0.1/"
        self.__base = ""
        self.__bindmethod = "simple"
        self.__binddn = None
        self.__bindpw = None
        self.__saslmech = None
        self.__authz_id = ""
        self.__filter = "(objectClass=*)"
        self.__result_attrs = []
        self.__scope = "sub"
        self.__usetls = False
        self.__cipher = "TLSv1"
        self.__reqcert = "never"
        self.__cert = None
        self.__key = None
        self.__cacert = None
        
        for k, v in self._filecontent.items():
            if k == "host":
                self.__host = v.split(',')
                for idx, server in enumerate(self.__host):
                    self.__host[idx] = server.strip()
            elif k == "base":
                self.__base = v
            elif k == "bindmethod":
                self.__bindmethod = v
            elif k == "binddn":
                self.__binddn = v
            elif k == "bindpw":
                self.__bindpw = v
            elif k == "saslmech":
                self.__saslmech = v
            elif k == "authzid":
                self.__authz_id = v
            elif k == "filter":
                self.__filter = v
            elif k == "result_attrs":
                self.__result_attrs = v.split(',')
                for idx, attr in enumerate(self.__result_attrs):
                    self.__result_attrs[idx] = attr.strip()
            elif k == "scope":
                self.__scope = v
            elif k == "usetls":
                self.__usetls = v
            elif k == "cipher":
                self.__cipher = v
            elif k == "reqcert":
                self.__reqcert = v
            elif k == "cert":
                self.__cert = v
            elif k == "key":
                self.__key = v
            elif k == "cacert":
                self.__cacert = v
            else:
                raise Exception("Unsupported parameter %s: %s" % (k, v))
        
        tls = False
        sasl = False

        # Do we connect with TLS?
        if self.__usetls.lower() in ("yes", "true", "1"):
            if self.__reqcert in ("never", "allow", "try", "demand"):
                if self.__reqcert == "never":
                    reqcert = ldap.OPT_X_TLS_NEVER
                elif self.__reqcert == "allow":
                    reqcert = ldap.OPT_X_TLS_ALLOW
                elif self.__reqcert == "try":
                    reqcert = ldap.OPT_X_TLS_TRY
                elif self.__reqcert == "demand":
                    reqcert = ldap.OPT_X_TLS_DEMAND
            else:
                raise Exception("Unsupported TLS reqcert Option %s" %
                                self.__reqcert)
            ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, reqcert)
            ldap.set_option(ldap.OPT_X_TLS_CIPHER_SUITE, self.__cipher)
            if self.__cacert is not None:
                ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, self.__cacert)
            if self.__cert is not None:
                ldap.set_option(ldap.OPT_X_TLS_CERTFILE, self.__cert)
            if self.__key is not None:
                ldap.set_option(ldap.OPT_X_TLS_KEYFILE, self.__key)
            tls = True

        # Are we SASL binding to our servers?
        if self.__bindmethod == "sasl":
            if self.__saslmech.lower() == "digest-md5":
                auth_tokens = ldap.sasl.digest_md5(self.__binddn,
                                                   self.__bindpw)
            elif self.__saslmech.lower() == "cram-md5":
                auth_tokens = ldap.sasl.cram_md5(self.__binddn, self.__bindpw)
            elif self.__saslmech.lower() == "external":
                auth_tokens = ldap.sasl.external(self.__authz_id)
            elif self.__saslmech.lower() == "gssapi":
                auth_tokens = ldap.sasl.gssapi(self.__authz_id)
            else:
                raise Exception("Unsupported SASL mech %s" % self.__saslmech)
            sasl = True

        con = None
        for server in iter(self.__host):
            try:
                con = ReconnectLDAPObject(server, retry_max=1000000)
                if tls:
                    con.start_tls_s()
                if sasl:
                    con.sasl_interactive_bind_s("", auth_tokens)
                else:
                    con.simple_bind_s(self.__binddn, self.__bindpw)
            except:
                if Cfg.debug:
                    traceback.print_exc()
                continue
            break

        self.__con = con
    
    # This method is synchronized with Queue()
    def query_ldap(self, from_domain):
        if self.__con is None:
            return

        if Cfg.use_memcached:
            result = Cfg.memcached_con.get(from_domain)
            if result is not None:
                result = bool(result)
                if result:
                    text = "continue"
                else:
                    text = "reject"
                if Cfg.debug:
                    print("cached_result: %s=%s" % (from_domain, text))
                syslog(LOG_INFO, "cached_result: %s=%s" % (from_domain, text))
                return result

        if self.__scope in ("sub", "subtree"):
            scope = ldap.SCOPE_SUBTREE
        elif self.__scope in ("one", "onelevel"):
            scope = ldap.SCOPE_ONELEVEL
        elif self.__scope in ("base", "exact"):
            scope = ldap.SCOPE_BASE
        else:
            raise Exception("Unsupported LDAP scope %s" % self.__scope)

        ldap_filter = ""
        if "%s" in self.__filter.lower():
            filter_parts = self.__filter.split("%s")
            ldap_filter = from_domain.join(filter_parts)

        if Cfg.debug:
            print("====> LDAP-filter: %s" % ldap_filter)

        result = self.__con.search_st(self.__base,
                                      scope,
                                      ldap_filter,
                                      self.__result_attrs,
                                      timeout=LDAP_TIMEOUT)

        # Temporarily store the result
        tmp_lst = list()

        # result - list of tuples
        for row in iter(result):
            for res_attrs in row[1].values()[0]:
                tmp_lst.append(res_attrs)
                if Cfg.debug:
                    print "----> res_attrs = %s" % res_attrs
                    
        if tmp_lst != []:
            if Cfg.use_memcached:
                Cfg.memcached_con.set(from_domain, True, time=3600)
            return True
        else:
            if Cfg.use_memcached:
                Cfg.memcached_con.set(from_domain, False, time=60)
            return False


class SQLDomains(Domains):
    """SQL class. Currently only MySQL ist supported
    """
    def __init__(self, cffile):
        Domains.__init__(self, cffile)

        self.__con = None

        if self._cf_read_err:
            return

        self.__host = "localhost"
        self.__dbname = None
        self.__dbuser = None
        self.__dbpass = None
        self.__query = None

        for k, v in self._filecontent.items():
            if k == "host":
                self.__host = v
            elif k == "port":
                self.__port = int(v)
            elif k == "dbuser":
                self.__dbuser = v
            elif k == "dbpass":
                self.__dbpass = v
            elif k == "dbname":
                self.__dbname = v
            elif k == "query":
                self.__query = v

        # Initially connect, retry on errors; see below
        self.connect()

    def connect(self):
        con = None
        try:
            con = mdb.connect(self.__host,
                              self.__dbuser,
                              self.__dbpass,
                              self.__dbname)
        except:
            if Cfg.debug:
                traceback.print_exc()

        self.__con = con

    def query_sql(self, from_domain):
        if self.__con is None:
            return None
        if self.__query is None:
            return None

        if Cfg.use_memcached:
            result = Cfg.memcached_con.get(from_domain)
            if result is not None:
                result = bool(result)
                if result:
                    text = "continue"
                else:
                    text = "reject"
                if Cfg.debug:
                    print("cached_result: %s=%s" % (from_domain, text))
                syslog(LOG_INFO, "cached_result: %s=%s" % (from_domain, text))
                return result

        for retries in xrange(MAX_SQL_CONNECT_RETRIES):
            try:
                cur = self.__con.cursor()
                cur.execute(self.__query % from_domain)
                break
            except Exception, e:
                if e[0] == 2006:
                    # Lost connection, try reconnect
                    syslog(LOG_ERR,
                           "SQL connection lost (%i/i%): code=%s msg=%s"
                           % (retries+1, MAX_SQL_CONNECT_RETRIES, e[0], e[1]))
                    self.connect()
                else:
                    syslog(LOG_ERR, "SQL error: %s" % str(e))
                    return None
        else:
            return None

        domains = cur.fetchall()
        if Cfg.debug:
            print "SQL result for %s: %s" % (from_domain, str(domains))

        # Domain was found on SQL server, count > 0
        if len(domains) > 0:
            if Cfg.use_memcached:
                Cfg.memcached_con.set(from_domain, True, time=3600)
            return True
        # ... not found
        else:
            if Cfg.use_memcached:
                Cfg.memcached_con.set(from_domain, False, time=3600)
            return False


def runner():
    """Starts the milter loop"""

    Milter.factory = VrfyDmnMilter

    flags = Milter.CHGHDRS + Milter.ADDHDRS
    Milter.set_flags(flags)

    Milter.runmilter(NAME, Cfg.socketname, timeout=300)


def db_runner():
    """Implements a bi-directional queue that allows all milter threads to
    communicate with one single thread that does all DB operations.

    """
    db_running = False

    if Cfg.use_memcached:
        Cfg.memcached_con = memcache.Client([Cfg.memcached_con], debug=0)

    if Cfg.use_ldap:
        Cfg.ldap_con = LDAPDomains(Cfg.ldap_cf)
        if Cfg.ldap_con is not None:
            db_running = True

    if Cfg.use_sql:
        Cfg.sql_con = SQLDomains(Cfg.sql_cf)
        if Cfg.sql_con is not None:
            db_running = True

    if db_running:
        while True:
            req = Cfg.workerQueue.get()
            if not req:
                # Nothing more to process; skip
                continue
            # Queue, func, *args
            response, func, args = req
            try:
                result = func(*args)
            except:
                traceback.print_exc()
                result = None
            response.put(result)


def usage():
    """Print a simple usage to stdout"""

    print """%s [options]

-s, --socket            IPv4, IPv6 socket including port (default: %s)
-u, --user              Run milter as user (default: %s)
-g, --group             Run milter as group (default: %s)
-p, --pid               Pidfile to use

Backend:
-f, --file              Postfix domains map file
-l, --ldap              Config file for a LDAP connection
-S, --sql               Config file for a SQL connection (Currently MySQL)
-m, --memcached         memcached socket

Mode:
-F, --fix               Replace broken From:-header with envelope sender
-O, --opposite          Reject mail, if a sender uses our domain

-h, --help              Print this help
-d, --debug             Run on foreground
    """ % (NAME,
           "inet6:" + str(PORT) + "@" + BINDADDR,
           MILTERUSER,
           MILTERGROUP)


def main():
    pf_domains_map = None

    # Read command line options
    try:
        opts = getopt(sys.argv[1:],
                      "s:u:g:p:hdf:l:S:m:FO",
                      ["socket=",
                       "user=",
                       "group=",
                       "pid=",
                       "help",
                       "debug",
                       "file=",
                       "ldap=",
                       "sql",
                       "memcached=",
                       "fix",
                       "opposite"])[0]

        for opt, optarg in opts:
            if opt in ("-h", "--help"):
                usage()
                sys.exit()
            elif opt in ("-d", "--debug"):
                Cfg.debug = True
            elif opt in ("-f", "--file"):
                pf_domains_map = str(optarg)
                Cfg.use_flatfile = True
            elif opt in ("-l", "--ldap"):
                if not no_module_ldap:
                    Cfg.ldap_cf = optarg
                    Cfg.use_ldap = True
                else:
                    print >> sys.stderr, "Missing python module ldap!"
            elif opt in ("-S", "--sql"):
                if not no_module_sql:
                    Cfg.sql_cf = optarg
                    Cfg.use_sql = True
                else:
                    print >> sys.stderr, ";issing python module for SQL!"
            elif opt in ("-m", "--memcached"):
                if not no_module_memcache:
                    Cfg.memcached_con = optarg
                    Cfg.use_memcached = True
                else:
                    print >> sys.stderr, "Missing python module memcache!"
            elif opt in ("-F", "--fix"):
                Cfg.fix_header = True
            elif opt in ("-O", "--opposite"):
                Cfg.opposite = True
            elif opt in ("-s", "--socket"):
                Cfg.socketname = optarg
            elif opt in ("-u", "--user"):
                Cfg.milteruser = optarg
            elif opt in ("-g", "--group"):
                Cfg.miltergroup = optarg
            elif opt in ("-p", "--pid"):
                Cfg.pidfile = optarg
            else:
                usage()
                sys.exit(os.EX_USAGE)

    except Exception, e:
        print >> sys.stderr, "Syntax error: %s" % e
        sys.exit(os.EX_USAGE)

    if Cfg.fix_header and Cfg.opposite:
        print >> sys.stderr, "Do not use --fix and --opposite together"
        sys.exit(os.EX_USAGE)

    if pf_domains_map is not None:
        if not os.path.exists(pf_domains_map):
            print >> sys.stderr, ('No such file: %s' % pf_domains_map)
            sys.exit(os.EX_USAGE)

        # Read list of domains
        PfDomains.domains = pf_domains_map

    # We want unbuffered stdout and stderr
    unbuf_stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    unbuf_stderr = os.fdopen(sys.stderr.fileno(), 'w', 0)
    sys.stdout = unbuf_stdout
    sys.stderr = unbuf_stderr
    
    openlog(NAME, LOG_PID, LOG_MAIL)

    uid = pwd.getpwnam(Cfg.milteruser)[2]
    gid = grp.getgrnam(Cfg.miltergroup)[2]

    try:
        # Needs Python >=2.7
        os.initgroups(Cfg.milteruser, gid)
    except:
        pass

    try:
        os.setgid(gid)
    except OSError, e:
        print >> sys.stderr, ('Could not set effective group id: %s' % e)
        sys.exit(1)
    try:
        os.setuid(uid)
    except OSError, e:
        print >> sys.stderr, ('Could not set effective user id: %s' % e)
        sys.exit(1)

    if Cfg.debug:
        print "Switched user to %s, group to %s" % (uid, gid)
        print "Staying in foreground..."
    else:
        try:
            pid = os.fork()
        except OSError, e:
            print >> sys.stderr, ("First fork failed: (%d) %s"
                                  % (e.errno, e.strerror))
            sys.exit(1)
        if pid == 0:
            os.setsid()
            try:
                pid = os.fork()
            except OSError, e:
                print >> sys.stderr, ("Second fork failed: (%d) %s"
                                      % (e.errno, e.strerror))
                sys.exit(1)
            if pid == 0:
                os.chdir("/")
                os.umask(0)
            else:
                os._exit(0)
        else:
            os._exit(0)
    
        # In daemon mode, we redirect stdin, stdout and stderr to /dev/null   
        sys.stdin  = file(os.devnull, "r")
        sys.stdout = file(os.devnull, "w")
        sys.stderr = file(os.devnull, "w")
    
    try:
        if Cfg.pidfile is not None:
            with open(Cfg.pidfile, "w") as fd:
                fd.write(str(os.getpid()))
    except IOError, e:
        if Cfg.debug:
            print >> sys.stderr, ("Cannot create PID file: (%d) %s"
                                  % (e.errno, e.strerror))

    def finish(signum, frame):
        syslog(LOG_NOTICE,
               "%s-%s milter shutdown. Caught signal %d"
               % (NAME, VERSION, signum))
    
    def reload_postfix_domains(signum, frame):
        if Cfg.debug:
            print("%s-%s milter reload Postfix domains. Caught signal %d"
                  % (NAME, VERSION, signum))
        syslog(LOG_NOTICE,
               "%s-%s milter reload Postfix domains. Caught signal %d"
               % (NAME, VERSION, signum))

        if Cfg.use_flatfile and pf_domains_map is not None:
            PfDomains.domains = pf_domains_map

        # Go back to sleep
        signal.pause()

    def print_postfix_domains(signum, frame):
        if Cfg.use_flatfile:
            all_domains = ", ".join(PfDomains.domains)

            # max syslog line length
            offset = 1536
            str_sgmts = []
            max_len = len(all_domains)
            d = "..."

            for i in xrange(0, max_len, offset):
                if i == 0:
                    str_sgmts.append(all_domains[i:i+offset].strip() + d)
                if i > 0 and i+offset < max_len:
                    str_sgmts.append(d + all_domains[i:i+offset].strip() + d)
                if i > 0 and i+offset >= max_len:
                    str_sgmts.append(d + all_domains[i:i+offset].strip())

            for part in iter(str_sgmts):
                if Cfg.debug:
                    print("%s-%s milter Postfix domains: [%s]"
                          % (NAME, VERSION, part))
                syslog(LOG_NOTICE,
                       "%s-%s milter Postfix domains: [%s]"
                       % (NAME, VERSION, part))

        # Go back to sleep
        signal.pause()

    signal.signal(signal.SIGINT, finish)
    signal.signal(signal.SIGQUIT, finish)
    signal.signal(signal.SIGTERM, finish)

    signal.signal(signal.SIGHUP, reload_postfix_domains)
    signal.signal(signal.SIGUSR1, print_postfix_domains)
    signal.siginterrupt(signal.SIGHUP, False)
    signal.siginterrupt(signal.SIGUSR1, False)
    
    syslog(LOG_NOTICE, "%s-%s milter startup" % (NAME, VERSION))

    milter_t = Thread(target=runner)
    milter_t.daemon = True
    milter_t.start()

    # Worker thread for all kinds of databases
    db_runner_t = Thread(target=db_runner)
    db_runner_t.daemon = True
    db_runner_t.start()

    # Waiting for SIGNAL to terminate process
    signal.pause()

    try:
        if Cfg.pidfile is not None and os.path.exists(Cfg.pidfile):
            os.unlink(Cfg.pidfile)
    except IOError, e:
        if Cfg.debug:
            print >> sys.stderr, ("Cannot remove PID file: (%d) %s"
                                  % (e.errno, e.strerror))
        sys.exit(1)

    sys.exit(0)


if __name__ == "__main__":
    main()

# vim: expandtab ts=4 sw=4
